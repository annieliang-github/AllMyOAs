Given two arrays A and B of length N, determine if there is a way to make A equal to B by reversing any subarrays from array B any number of times.
Signature
bool areTheyEqual(int[] arr_a, int[] arr_b)
Input
All integers in array are in the range [0, 1,000,000,000].
Output
Return true if B can be made equal to A, return false otherwise.
Example
A = [1, 2, 3, 4]
B = [1, 4, 3, 2]
output = true
After reversing the subarray of B from indices 1 to 3, array B will equal array A.


class Main {

  // Add any helper functions you may need here
  

  boolean areTheyEqual(int[] array_a, int[] array_b) {
    // Write your code here
    if (array_a == null && array_b != null || array_a != null && array_b == null || array_a.length != array_b.length) {
            return false;
        }

        boolean res = true;
        // 1. use sorting
        Arrays.sort(array_a);
        Arrays.sort(array_b);

        for (int i = 0; i < array_b.length && res; i++) {
            res = array_a[i] == array_b[i];
        }
    return res;
  }



class Main {

  // Add any helper functions you may need here

  boolean areTheyEqual(int[] array_a, int[] array_b) {
    // Write your code here    
    Map<Integer, Integer> map = new HashMap<>();
    for (int i = 0; i < array_a.length; i++) {
      map.put(array_a[i], map.getOrDefault(array_a[i], 0) + 1);
    }
    for (int i = 0; i < array_b.length; i++) {
      if (map.containsKey(array_b[i])) {
        int count = map.get(array_b[i]);
        if (count > 0) {
          map.put(array_b[i], count - 1);
        } 
      } else {
        return false;
      }
    }
    
    for (Integer value : map.values()) {
      if (value != 0) return false;
    }
    return true;
  }
